# Youtube playlists

```elixir
Mix.install([
  {:kino, "~> 0.9.1"},
  # {:poison, "~> 4.0"},
  # {:httpoison, "~> 1.8"},
  # {:google_api_you_tube, "~> 0.40"},
  {:youtube_organizer, path: Path.join([__DIR__, "youtube_organizer"])}
])
```

## Section

```elixir
auth = YTOrg.AuthWrapper.new("creds.json")
:ok
```

```elixir
playlists =
  %YTOrg.YoutubePlaylistFetcher{auth: auth}
  |> YTOrg.YoutubePlaylistFetcher.fetch_youtube_playlists()

[%YTOrg.YoutubePlaylist{videos: [vid | _]} | _] = playlists
vid
```

```elixir
[%YTOrg.YoutubePlaylist{videos: [vid | _]} | _] = playlists
vid
```

```elixir
alias YTOrg.{YoutubePlaylist}
```

```elixir
defmodule YoutubePlaylistInterface do
  defstruct [:playlists]

  def get_playlists_by_name(interface) do
    for %YoutubePlaylist{metadata: meta, videos: videos} <- interface.playlists, into: %{} do
      {meta.title, videos}
    end
  end

  def from_google_creds(google_creds_path \\ "creds.json") do
    google_creds_path
    |> YoutubePlaylistFetcher.new()
    |> YoutubePlaylistFetcher.fetch_youtube_playlists()
    |> new()
  end

  def new(playlists) do
    playlist_options =
      for playlist <- playlists, do: {playlist.metadata.title, playlist.metadata.title}

    playlist_name = Kino.Input.select("playlist_name", playlist_options)
    frame = Kino.Frame.new()
    inputs = [playlist_name: playlist_name]
    form = Kino.Control.form(inputs, submit: "Send", report_changes: true)

    form |> Kino.render()
    frame |> Kino.render()
    playlists |> wire_widgets(frame, form)
    %YoutubePlaylistInterface{playlists: playlists}
  end

  def wire_widgets(playlists, frame, form) do
    playlists_by_name =
      for %YoutubePlaylist{metadata: meta, videos: videos} <- playlists, into: %{} do
        {meta.title, videos}
      end

    callback = fn rec ->
      case rec do
        %{data: %{playlist_name: playlist_name}, origin: origin} ->
          frame
          |> Kino.Frame.render(
            playlists_by_name[playlist_name]
            |> playlist_kino()
          )

        _ ->
          nil
      end
    end

    Kino.listen(form, callback)
  end

  def add_markdown_to_frame(frame, markdown_str) do
    Kino.Frame.append(frame, Kino.Markdown.new(markdown_str))
  end

  def playlist_kino(videos) do
    images =
      for vid <- videos do
        image = Kino.Markdown.new("![](#{vid.thumbnails["medium"]["url"]})")
        title_with_link = vid |> get_link_md() |> Kino.Markdown.new()
        Kino.Layout.grid([image, title_with_link], boxed: true)
      end

    Kino.Layout.grid(images, columns: 4)
  end

  def get_link_md(vid) do
    "[#{vid.title}](#{vid.url})"
  end
end
```

```elixir
interface = YoutubePlaylistInterface.new(playlists)
:ok
```
